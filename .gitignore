.env
Module_1/Docker/ny_taxi_postgres_data/*
Module_1/Docker/data_pgadmin/*
Module_1/Docker/yellow_tripdata_2021-01.csv
Module_1/Docker/yellow_tripdata_2021-01.csv.gz
Module_1/Docker/taxi_zone_lookup.csv
Module_1/Docker/output.csv
Module_1/Docker/output.csv.gz
Module_1/Homework/taxi_zone_lookup.csv
Module_1/Homework/output.csv.gz
Module_1/Homework/green_tripdata_2019-10.csv
Module_1/Docker/green_tripdata_2019-10.csv.gz
terraform/keys/
Module_1/terraform/keys/my-cred.json
my-cred.json
/*.json
/*.csv
/*.csv.gz
Module_1/terraform/keys/my-cred.json


# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
